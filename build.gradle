/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

buildscript {
  repositories.jcenter()
}

ext {
  dockerBuilder = "docker-builder"
  qname = "dm0275/minecraft-server"
  worldName = System.getenv("WORLD") ?: "world"
  vanillaDirectories = ["data/$worldName/world", "data/$worldName/mods"]
  vanillaVersions = [
      '1.13.2': [
          'javaVersion': '8',
          'url': 'https://launcher.mojang.com/v1/objects/3737db93722a9e39eeada7c27e7aca28b144ffa7/server.jar'
      ],
      '1.14.4': [
          'javaVersion': '8',
          'url': 'https://launcher.mojang.com/v1/objects/3dc3d84a581f14691199cf6831b71ed1296a9fdf/server.jar'
      ],
      '1.15.2': [
          'javaVersion': '8',
          'url': 'https://launcher.mojang.com/v1/objects/bb2b6b1aefcd70dfd1892149ac3a215f6c636b07/server.jar'
      ],
      '1.16.5': [
          'javaVersion': '8',
          'url': 'https://launcher.mojang.com/v1/objects/1b557e7b033b583cd9f66746b7a9ab1ec1673ced/server.jar'
      ],
      '1.17.1': [
          'javaVersion': '8',
          'url': 'https://launcher.mojang.com/v1/objects/a16d67e5807f57fc4e550299cf20226194497dc2/server.jar'
      ],
      '1.18.1': [
          'javaVersion': '8',
          'url': 'https://launcher.mojang.com/v1/objects/125e5adf40c659fd3bce3e66e67a16bb49ecc1b9/server.jar'
      ],
      '1.19.2': [
          'javaVersion': '17',
          'url': 'https://piston-data.mojang.com/v1/objects/f69c284232d7c7580bd89a5a4931c3581eae1378/server.jar'
      ],
      '1.19.3': [
          'javaVersion': '17',
          'url': 'https://launcher.mojang.com/v1/objects/c9df48efed58511cdd0213c56b9013a7b5c9ac1f/server.jar'
      ],
  ]
  forgeDirectories = ["data_forge/$worldName/world", "data_forge/$worldName/mods"]
  forgeVersions = [
      '1.12.2': [
          'javaVersion': '8',
          'forgeVersion': '14.23.5.2859'
      ],
      '1.13.2': [
          'javaVersion': '8',
          'forgeVersion': '25.0.223'
      ],
      '1.14.4': [
          'javaVersion': '8',
          'forgeVersion': '28.2.26'
      ],
      '1.15.2': [
          'javaVersion': '8',
          'forgeVersion': '31.2.57'
      ],
      '1.16.5': [
          'javaVersion': '8',
          'forgeVersion': '36.2.42'
      ],
      '1.18.2': [
          'javaVersion': '17',
          'forgeVersion': '40.2.21'
      ],
      '1.19.2': [
          'javaVersion': '17',
          'forgeVersion': '43.3.0'
      ],
      '1.19.3': [
          'javaVersion': '17',
          'forgeVersion': '44.1.0'
      ],
      '1.20.1': [
          'javaVersion': '17',
          'forgeVersion': '47.3.6'
      ],
      '1.20.4': [
          'javaVersion': '17',
          'forgeVersion': '49.0.22'
      ],
      '1.21.4': [
          'javaVersion': '17',
          'forgeVersion': '54.0.12'
      ],
  ]
  port = System.getenv("MC_PORT") ?:"25565"
  latestTag = "${qname}:latest"
  latestTagForge = "${qname}:forge-latest"
  minMemory = System.getenv("JAVA_MIN_MEM") ?: "3G"
  maxMemory = System.getenv("JAVA_MAX_MEM") ?: "3G"
  minecraftVersion = System.getenv("MC_VERSION") ?: "latest"
  envVars = """export MC_IMAGE=${qname}:${minecraftVersion} \
    PORT=${port} \
    JAVA_MIN_MEM=${minMemory} \
    JAVA_MAX_MEM=${maxMemory} \
    WORLD_DIR=\$PWD/data/${worldName}/world \
    MODS_DIR=\$PWD/data/${worldName}/mods"""
  envVarsForge = """export MC_IMAGE=${qname}:forge-${minecraftVersion} \
    PORT=${port} \
    JAVA_MIN_MEM=3G \
    JAVA_MAX_MEM=3G \
    WORLD_DIR=\$PWD/data_forge/${worldName}/world \
    MODS_DIR=\$PWD/data_forge/${worldName}/mods"""
}

task dockerLogin(type: Exec) {
  commandLine "bash", "-c",  """printenv DOCKER_TOKEN \
    | docker login -u "\$DOCKER_USERNAME" --password-stdin"""
}

task setup {
  group "Mincraft"
  description "Setup the Minecraft directories"
  doLast {
    vanillaDirectories.forEach { dir ->
      mkdir(dir)
    }
    println(envVars)
  }
}

task setupForge {
  group "Mincraft"
  description "Setup the Minecraft (forge) directories"
  doLast {
    forgeDirectories.forEach { dir ->
      mkdir(dir)
    }
    println(envVarsForge)
  }
}

task cleanDirs(type: Delete) {
  doLast {
    vanillaDirectories.forEach { dir ->
      delete(dir)
    }
  }
}

task cleanDirsForge(type: Delete) {
  doLast {
    forgeDirectories.forEach { dir ->
      delete(dir)
    }
  }
}

task run(type: Exec) {
  group "Mincraft"
  description "Run the latest Minecraft server image"
  dependsOn setup
  commandLine "bash", "-c", "${envVars} && docker-compose up"
}

task runBackground(type: Exec) {
  group "Mincraft"
  description "Run the latest Minecraft server image (daemonized)"
  dependsOn setup
  commandLine "bash", "-c", "${envVars} && docker-compose run -d -p ${port}:25565 --name ${worldName}-minecraft minecraft"
}

task runForge(type: Exec) {
  group "Mincraft"
  description "Run the latest Forge Minecraft server image"
  dependsOn setupForge
  commandLine "bash", "-c", "${envVarsForge} && docker-compose up"
}

task runBackgroundForge(type: Exec) {
  group "Mincraft"
  description "Run the latest Forge Minecraft server image (daemonized)"
  dependsOn setupForge
  commandLine "bash", "-c", "${envVarsForge} && docker-compose run -d -p ${port}:25565 --name ${worldName}-forge minecraft"
}

task stop(type: Exec) {
  commandLine "bash", "-c", "${envVars} && docker-compose stop"
}

task setupDockerBuilder() {
  doLast {
    def stdout = new ByteArrayOutputStream()
    exec{
      commandLine "docker buildx ls".tokenize()
      standardOutput = stdout
      errorOutput = stdout
      ignoreExitValue true
    }

    if (!stdout.toString().contains(dockerBuilder)) {
      exec {
        commandLine("docker buildx create --name $dockerBuilder --driver docker-container".tokenize())
      }
    }
  }
}

vanillaVersions.keySet().each { version ->
  String buildCmd = """docker buildx build --builder ${dockerBuilder} 
            --platform=linux/amd64,linux/arm64 \
            --file vanilla/Dockerfile \
            --build-arg mc_version=${version} \
            --build-arg mc_url_link=${vanillaVersions.get(version)['url']} \
            --build-arg java_version=${vanillaVersions.get(version)['javaVersion']} \
            -t ${qname}:${version}"""
  tasks.create(name: "buildVanilla${version}", type: Exec) {
    group "Mincraft"
    description "Build Minecraft server v${version} image"
    dependsOn(setupDockerBuilder)
    if (version == vanillaVersions.keySet().last()) {
      commandLine "${buildCmd} -t ${latestTag} .".tokenize()
    } else {
      commandLine "${buildCmd} .".tokenize()
    }
  }

  tasks.create(name: "pushVanilla${version}", dependsOn: dockerLogin, type: Exec) {
    group "Mincraft"
    description "Push Minecraft server v${version} image"
    dependsOn(setupDockerBuilder)

    if (version == vanillaVersions.keySet().last()) {
      commandLine "${buildCmd} -t ${latestTag} --push .".tokenize()
    } else {
      commandLine "${buildCmd} --push .".tokenize()
    }
  }
}

task buildAllVanilla() {
  dependsOn(setupDockerBuilder)
  tasks.matching { Task task -> task.name.startsWith("buildVanilla")}.forEach { buildTask ->
    dependsOn(buildTask)
    buildTask.mustRunAfter(setupDockerBuilder)
  }
}

task pushAllVanilla(dependsOn: tasks.matching { Task task -> task.name.startsWith("pushVanilla")})

forgeVersions.keySet().toArray().each {  version ->
  String buildCmd = """docker buildx build --builder ${dockerBuilder} 
        --platform=linux/amd64,linux/arm64 \
        --file forge/Dockerfile \
        --build-arg mc_version=${version} \
        --build-arg forge_version=${forgeVersions.get(version)['forgeVersion']} \
        --build-arg java_version=${forgeVersions.get(version)['javaVersion']} \
        -t ${qname}:forge-${version}"""
  tasks.create(name: "buildForge${version}", type: Exec) {
    group "Mincraft"
    description "Build Forge Minecraft server v${version} image (forge v${forgeVersions.get(version)['forgeVersion']})"
    dependsOn(setupDockerBuilder)
    if (version == forgeVersions.keySet().toArray().last()) {
      commandLine "${buildCmd} -t ${latestTagForge} .".tokenize()
    } else {
      commandLine "${buildCmd} .".tokenize()
    }
  }

  tasks.create(name: "pushForge${version}", dependsOn: dockerLogin, type: Exec) {
    group "Mincraft"
    description "Push Forge Minecraft server v${version} image"
    dependsOn(setupDockerBuilder)

    if (version == forgeVersions.keySet().toArray().last()) {
      commandLine "${buildCmd} -t ${latestTagForge} --push .".tokenize()
    } else {
      commandLine "${buildCmd} --push .".tokenize()
    }
  }
}

task buildAllForge() {
  group "Mincraft"
  description "Build All Minecraft server images"

  dependsOn(setupDockerBuilder)
  tasks.matching { Task task -> task.name.startsWith("buildForge")}.forEach { buildTask ->
    dependsOn(buildTask)
    buildTask.mustRunAfter(setupDockerBuilder)
  }
}

task pushAllForge(dependsOn: tasks.matching { Task task -> task.name.startsWith("pushForge")}) {
  group "Mincraft"
  description "Build All Forge Minecraft server images"
}

task setupBuild {
  doLast {
    def tasksJson = "{\"include\": ["
    def taskList = tasks.matching { Task task -> task.name.startsWith("build") }
    taskList.eachWithIndex { Task buildTask, int i ->
        if (buildTask.name.contains("buildAll") || buildTask.name.contains("buildEnvironment")) {
          return
        }

        if (i == taskList.size()-1) {
          tasksJson += "{\"task\": \"${buildTask.name}\"}"
        } else {
          tasksJson += "{\"task\": \"${buildTask.name}\"},"
        }
    }
    tasksJson += "]}"

    def output = new File('output.json')
    output.write(tasksJson)
  }
}

task setupPush {
  doLast {
    def tasksJson = "{\"include\": ["
    def taskList = tasks.matching { Task task -> task.name.startsWith("push") }
    taskList.eachWithIndex { Task buildTask, int i ->
      if (buildTask.name.contains("pushAll")) {
        return
      }

      if (i == taskList.size()-1) {
        tasksJson += "{\"task\": \"${buildTask.name}\"}"
      } else {
        tasksJson += "{\"task\": \"${buildTask.name}\"},"
      }
    }
    tasksJson += "]}"

    def output = new File('output.json')
    output.write(tasksJson)
  }
}